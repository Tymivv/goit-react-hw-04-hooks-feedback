{"version":3,"sources":["components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/SectionTitle/SectionTitle.jsx","components/App/App.jsx","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","option","onClick","type","SectionTitle","title","className","App","state","countPositiveFeedbackPercentage","Math","round","countTotalFeedback","setState","prevState","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAwBeA,EAtBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,mCACE,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,aCUOC,EAlBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,mCACGC,OAAOC,KAAKH,GAASI,KAAI,SAAAC,GAAM,OAC9B,wBACEC,QAAS,kBAAML,EAAgBI,IAE/BE,KAAK,SAHP,SAKGF,GAHIA,SCCEG,EARM,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACtB,OACE,mCACE,oBAAIC,UAAU,QAAd,SAAuBD,OCEvBE,E,4MACJC,MAAQ,CACNlB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPiB,gCAAkC,WAChC,MAA+B,EAAKD,MAA5BlB,EAAR,EAAQA,KACFG,EAAQH,EADd,EAAcC,QAAd,EAAuBC,IAGvB,OADekB,KAAKC,MAAOrB,EAAOG,EAAS,M,EAI7CmB,mBAAqB,WACnB,MAA+B,EAAKJ,MACpC,OADA,EAAQlB,KAAR,EAAcC,QAAd,EAAuBC,K,EAIzBK,gBAAkB,SAAAD,GAChB,EAAKiB,UAAS,SAAAC,GAAS,sBACpBlB,EAAUkB,EAAUlB,GAAW,O,EAIpCgB,mBAAqB,WAEnB,OADY,EAAKJ,MAAMlB,KAAO,EAAKkB,MAAMjB,QAAU,EAAKiB,MAAMhB,K,4CAGhE,WACE,MAA+BuB,KAAKP,MAA5BlB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACvB,OACE,sBAAKc,UAAU,YAAf,UACE,cAAC,EAAD,CAAcD,MAAM,0BACpB,cAAC,EAAD,CACET,QAASmB,KAAKP,MACdX,gBAAiBkB,KAAKlB,kBAEvBkB,KAAKH,qBAAuB,EAC3B,+BACE,cAAC,EAAD,CAAcP,MAAM,eACpB,cAAC,EAAD,CACEf,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOsB,KAAKH,qBACZlB,mBAAoBqB,KAAKN,uCAI7B,yD,GAlDQO,aAyDHT,I,MCvDfU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a37a0efd.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <>\r\n      <ul>\r\n        <li>Good: {good}</li>\r\n        <li>Neutral: {neutral}</li>\r\n        <li>Bad: {bad}</li>\r\n        <li>Total: {total}</li>\r\n        <li>Positive feedback: {positivePercentage}%</li>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positivePercentage: PropTypes.number,\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <>\r\n    {Object.keys(options).map(option => (\r\n      <button\r\n        onClick={() => onLeaveFeedback(option)}\r\n        key={option}\r\n        type=\"button\"\r\n      >\r\n        {option}\r\n      </button>\r\n    ))}\r\n  </>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","const SectionTitle = ({ title }) => {\r\n  return (\r\n    <>\r\n      <h2 className=\"title\">{title}</h2>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SectionTitle;\r\n","import { Component } from 'react';\nimport Statistics from '../Statistics/Statistics';\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions';\nimport SectionTitle from '../SectionTitle/SectionTitle';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good, neutral, bad } = this.state;\n    const total = good + neutral + bad;\n    const total1 = Math.round((good / total) * 100);\n    return total1;\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  onLeaveFeedback = options => {\n    this.setState(prevState => ({\n      [options]: prevState[options] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const sum = this.state.good + this.state.neutral + this.state.bad;\n    return sum;\n  };\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <div className=\"conteiner\">\n        <SectionTitle title=\"Please leave feedback\" />\n        <FeedbackOptions\n          options={this.state}\n          onLeaveFeedback={this.onLeaveFeedback}\n        />\n        {this.countTotalFeedback() > 0 ? (\n          <ul>\n            <SectionTitle title=\"Statistics\" />\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          </ul>\n        ) : (\n          <p>No feetback given</p>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App/App.jsx';\n//import 'modern-normalize/modern-normalize.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}